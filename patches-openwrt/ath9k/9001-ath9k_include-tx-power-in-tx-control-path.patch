--- a/drivers/net/wireless/ath/ath9k/ath9k.h
+++ b/drivers/net/wireless/ath/ath9k/ath9k.h
@@ -228,6 +228,7 @@ struct ath_buf {
 	dma_addr_t bf_daddr;		/* physical addr of desc */
 	dma_addr_t bf_buf_addr;	/* physical addr of data buffer, for DMA */
 	struct ieee80211_tx_rate rates[4];
+	s16 txpower_idx[4];
 	struct ath_buf_state bf_state;
 };
 
--- a/drivers/net/wireless/ath/ath9k/xmit.c
+++ b/drivers/net/wireless/ath/ath9k/xmit.c
@@ -179,6 +179,7 @@ static bool ath_merge_ratetbl(struct iee
 		i = 0;
 	} else {
 		bf->rates[0] = tx_info->control.rates[0];
+		bf->txpower_idx[0] = tx_info->control.txpower_idx;
 		i = 1;
 	}
 
@@ -191,6 +192,8 @@ static bool ath_merge_ratetbl(struct iee
 			bf->rates[i].count = ratetbl->rate[i].count_cts;
 		else
 			bf->rates[i].count = ratetbl->rate[i].count;
+
+		bf->txpower_idx[i] = ratetbl->rate[i].txpower_idx;
 	}
 
 	return true;
@@ -1174,18 +1177,26 @@ void ath_update_max_aggr_framelen(struct
 	}
 }
 
-static u8 ath_get_rate_txpower(struct ath_softc *sc, struct ath_buf *bf,
-			       u8 rateidx, bool is_40, bool is_cck, bool is_mcs)
+static void ath_get_rate_txpower(struct ath_softc *sc, struct ath_buf *bf,
+				 struct ath_tx_info *txi, u8 idx, u8 rateidx,
+				 bool is_40, bool is_cck, bool is_mcs)
 {
-	u8 max_power;
 	struct sk_buff *skb;
 	struct ath_frame_info *fi;
 	struct ieee80211_tx_info *info;
 	struct ath_hw *ah = sc->sc_ah;
 	bool is_2ghz, is_5ghz, use_stbc;
+	u8 tpc_power = MAX_RATE_POWER;
+	u8 max_power;
+	u8 rpt_power;
 
-	if (sc->tx99_state || !ah->tpc_enabled)
-		return MAX_RATE_POWER;
+	if (sc->tx99_state || !ah->tpc_enabled) {
+		txi->txpower[idx] = MAX_RATE_POWER;
+		bf->txpower_idx[idx] = sc->tx99_state ? MAX_RATE_POWER : -1;
+		return;
+	}
+	if (bf->txpower_idx[idx] >= 0)
+		tpc_power = bf->txpower_idx[idx];
 
 	skb = bf->bf_mpdu;
 	fi = get_frame_info(skb);
@@ -1205,7 +1216,8 @@ static u8 ath_get_rate_txpower(struct at
 		rateidx += ATH9K_PWRTBL_11NA_OFDM_SHIFT;
 
 	if (!AR_SREV_9300_20_OR_LATER(ah)) {
-		int txpower = fi->tx_power;
+		int txpower = min(fi->tx_power, tpc_power);
+		int ofs = 0;
 
 		if (is_40) {
 			u8 power_ht40delta;
@@ -1220,25 +1232,25 @@ static u8 ath_get_rate_txpower(struct at
 			} else {
 				power_ht40delta = 2;
 			}
-			txpower += power_ht40delta;
+			ofs += power_ht40delta;
 		}
 
-		if (AR_SREV_9287(ah) || AR_SREV_9285(ah) ||
-		    AR_SREV_9271(ah)) {
-			txpower -= 2 * AR9287_PWR_TABLE_OFFSET_DB;
+		if (AR_SREV_9287(ah) || AR_SREV_9285(ah) || AR_SREV_9271(ah)) {
+			ofs -= 2 * AR9287_PWR_TABLE_OFFSET_DB;
 		} else if (AR_SREV_9280_20_OR_LATER(ah)) {
 			s8 power_offset;
 
 			power_offset = ah->eep_ops->get_eeprom(ah,
 							EEP_PWR_TABLE_OFFSET);
-			txpower -= 2 * power_offset;
+			ofs -= 2 * power_offset;
 		}
 
 		if (OLC_FOR_AR9280_20_LATER && is_cck)
-			txpower -= 2;
+			ofs -= 2;
 
-		txpower = max(txpower, 0);
+		txpower = max(txpower + ofs, 0);
 		max_power = min_t(u8, ah->tx_power[rateidx], txpower);
+		rpt_power = max_power - ofs;
 
 		/* XXX: clamp minimum TX power at 1 for AR9160 since if
 		 * max_power is set to 0, frames are transmitted at max
@@ -1247,17 +1259,24 @@ static u8 ath_get_rate_txpower(struct at
 		if (!max_power && !AR_SREV_9280_20_OR_LATER(ah))
 			max_power = 1;
 	} else if (!bf->bf_state.bfs_paprd) {
+		int txpower = min(fi->tx_power, tpc_power);
+
 		if (use_stbc)
 			max_power = min_t(u8, ah->tx_power_stbc[rateidx],
-					  fi->tx_power);
+					  txpower);
 		else
 			max_power = min_t(u8, ah->tx_power[rateidx],
-					  fi->tx_power);
+					  txpower);
+
+		rpt_power = max_power;
 	} else {
 		max_power = ah->paprd_training_power;
+		rpt_power = max_power;
 	}
 
-	return max_power;
+	txi->txpower[idx] = max_power;
+	bf->txpower_idx[idx] = rpt_power;
+	return;
 }
 
 static void ath_buf_set_rate(struct ath_softc *sc, struct ath_buf *bf,
@@ -1336,8 +1355,8 @@ static void ath_buf_set_rate(struct ath_
 				info->flags |= ATH9K_TXDESC_CTSENA;
 			}
 
-			info->txpower[i] = ath_get_rate_txpower(sc, bf, rix,
-								is_40, false, true);
+			ath_get_rate_txpower(sc, bf, info, i, rix, is_40,
+					     false, true);
 			continue;
 		}
 
@@ -1367,8 +1386,7 @@ static void ath_buf_set_rate(struct ath_
 			phy, rate->bitrate * 100, len, rix, is_sp);
 
 		is_cck = IS_CCK_RATE(info->rates[i].Rate);
-		info->txpower[i] = ath_get_rate_txpower(sc, bf, rix, false,
-							is_cck, false);
+		ath_get_rate_txpower(sc, bf, info, i, rix, false, is_cck, false);
 	}
 
 	/* For AR5416 - RTS cannot be followed by a frame larger than 8K */
